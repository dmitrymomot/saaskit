// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	"github.com/dmitrymomot/saaskit/pkg/email"
)

// NewEmailSender creates a new instance of EmailSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailSender {
	mock := &EmailSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// EmailSender is an autogenerated mock type for the EmailSender type
type EmailSender struct {
	mock.Mock
}

type EmailSender_Expecter struct {
	mock *mock.Mock
}

func (_m *EmailSender) EXPECT() *EmailSender_Expecter {
	return &EmailSender_Expecter{mock: &_m.Mock}
}

// SendEmail provides a mock function for the type EmailSender
func (_mock *EmailSender) SendEmail(ctx context.Context, params email.SendEmailParams) error {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, email.SendEmailParams) error); ok {
		r0 = returnFunc(ctx, params)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// EmailSender_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type EmailSender_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - params email.SendEmailParams
func (_e *EmailSender_Expecter) SendEmail(ctx interface{}, params interface{}) *EmailSender_SendEmail_Call {
	return &EmailSender_SendEmail_Call{Call: _e.mock.On("SendEmail", ctx, params)}
}

func (_c *EmailSender_SendEmail_Call) Run(run func(ctx context.Context, params email.SendEmailParams)) *EmailSender_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 email.SendEmailParams
		if args[1] != nil {
			arg1 = args[1].(email.SendEmailParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *EmailSender_SendEmail_Call) Return(err error) *EmailSender_SendEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EmailSender_SendEmail_Call) RunAndReturn(run func(ctx context.Context, params email.SendEmailParams) error) *EmailSender_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}
